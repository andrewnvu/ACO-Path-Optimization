
(setq ants '(((0 0))))

(setq ant '((0 0)))


(defun moveForward (x y)
    (let ((up -1)
          (down -1)
          (right -1)
          (left -1)
          (best -1))
        (if (< (+ y 1) 60)
            (if (string-equal (cdr (aref maze x (+ y 1))) '-)
                (setq right (+ (- (+ (+ y 1) x) (+ x y)) (* .1 (car (aref maze x (+ y 1)))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (< (+ x 1) 40)
            (if (string-equal (cdr (aref maze (+ x 1) y)) '-)
                (setq down (+ (- (+ (+ x 1) y) (+ x y)) (* .1 (car (aref maze (+ x 1) y))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (>= (- x 1) 0)
            (if (string-equal (cdr (aref maze (- x 1) y)) '-)
                (setq up (+ (- (+ (- x 1) y) (+ x y)) (* .1 (car (aref maze (- x 1) y))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (>= (- y 1) 0)
            (if (string-equal (cdr (aref maze x (- y 1))) '-)
                (setq left (+ (- (+ (- y 1) x) (+ x y)) (* .1 (car (aref maze x (- y 1)))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (setq best (max left down up right))
        (if (< (+ y 1) 60)
            (if (equal best right)
                (return-from moveForward (list x (+ y 1)))
            )
        )
        (if (>= (- y 1) 0)
            (if (equal best left)
                (return-from moveForward (list x (- y 1)))
            )
        )
        (if (< (+ x 1) 40)
            (if (equal best down)
                (return-from moveForward (list (+ x 1) y))
            )
        )
        (if (>= (- x 1) 0)
            (if (equal best up)
                (return-from moveForward (list (- x 1) y))
            )
        )
    )
)

(defun moveBackward (x y)
    (let ((up 1000)
          (down 1000)
          (right 1000)
          (left 1000)
          (best 1000))
        (if (< (+ y 1) 60)
            (if (string-equal (cdr (aref maze x (+ y 1))) '-)
                (setq right (+ (- (+ (+ y 1) x) (+ x y)) (* .1 (car (aref maze x (+ y 1)))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (< (+ x 1) 40)
            (if (string-equal (cdr (aref maze (+ x 1) y)) '-)
                (setq down (+ (- (+ (+ x 1) y) (+ x y)) (* .1 (car (aref maze (+ x 1) y))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (>= (- x 1) 0)
            (if (string-equal (cdr (aref maze (- x 1) y)) '-)
                (setq up (+ (- (+ (- x 1) y) (+ x y)) (* .1 (car (aref maze (- x 1) y))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (if (>= (- y 1) 0)
            (if (string-equal (cdr (aref maze x (- y 1))) '-)
                (setq left (+ (- (+ (- y 1) x) (+ x y)) (* .1 (car (aref maze x (- y 1)))) (/ (- (random 161) 80) 100.0)))
            )
        )
        (setq best (min left down up right))
        (if (< (+ y 1) 60)
            (if (equal best right)
                (return-from moveBackward (list x (+ y 1)))
            )
        )
        (if (>= (- y 1) 0)
            (if (equal best left)
                (return-from moveBackward (list x (- y 1)))
            )
        )
        (if (< (+ x 1) 40)
            (if (equal best down)
                (return-from moveBackward (list (+ x 1) y))
            )
        )
        (if (>= (- x 1) 0)
            (if (equal best up)
                (return-from moveBackward (list (- x 1) y))
            )
        )
    )
)

(defun moveBackward (x y)
    (let ((best nil))
        (if (< (+ y 1) 60)
            (if (string-equal (cdr (aref maze x (+ y 1))) '-)
                (print 'right)
                (push '(x (+ y 1)) ants)
                (setq best '(x (+ y 1)))
            )
        )
        (if (< (+ x 1) 40)
            (if (string-equal (cdr (aref maze (+ x 1) y)) '-)
                (print 'down)
            )
        )
        (if (>= (- x 1) 0)
            (if (string-equal (cdr (aref maze (- x 1) y)) '-)
                (print 'up)
            )
        )
        (if (>= (- y 1) 0)
            (if (string-equal (cdr (aref maze x (- y 1))) '-)
                (print 'left)
            )
        )
    )
)


(defun scentReduction ()
    (destructuring-bind (n m) (array-dimensions maze)
        (loop for i from 0 below n do
            (loop for j from 0 below m do
                (if (< (car (aref maze i j)) 1)
                    (setf (car (aref maze i j)) 0)
                  (decf (car (aref maze i j)) (* (car (aref maze i j)) 0.1))
                )
            )
        )
    )
)

(defun scentSpread ()
    (destructuring-bind (n m) (array-dimensions maze)
        (loop for i from 0 below n do
            (loop for j from 0 below m do
                (if (< (+ i 1) 40)
                    (incf (car (aref maze (+ i 1) j)) (* (car (aref maze i j)) 0.2))
                )
                (if (> (- i 1) 0)
                    (incf (car (aref maze (- i 1) j)) (* (car (aref maze i j)) 0.2))
                )
                (if (< (+ j 1) 60)
                    (incf (car (aref maze i (+ j 1))) (* (car (aref maze i j)) 0.2))
                )
                (if (> (- j 1) 0)
                     (incf (car (aref maze i (- j 1))) (* (car (aref maze i j)) 0.2))
                )
            )
        )
    )
)


(defun main ()
    (let ((goal 0))
        (loop while (< goal 30) do
            (loop for x from 0 to (- (list-length ants) 1) do 
                (progn
                    (if (equal (car (nth x ants)) '(39 59))
                        (incf goal 1)
                      (print (push (moveForward (nth 0 (car (nth x ants))) (nth 1 (car (nth x ants)))) (nth x ants)))
                    )
                )
            )
            (if (< (list-length ants) 50)
                (push '((0 0)) ants)
            )
        )
        (print goal)
    )
)

(defun testing ()
    (loop for i from 1 to 1000 do
        (progn 
            (print ant)
            (if (equal (car ant) '(0 0))
                (return)
            )
            (push (moveBackward (nth 0 (car ant)) (nth 1 (car ant))) ant)
        )
    )
)


(setq maze (make-array '(40 60) :initial-contents
        '(
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) )  
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -) ) 
                ((0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x) ) 
                ((0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x) ) 
                ((0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
                ((0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . x)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -)  (0 . -) ) 
        )         
    )
)
